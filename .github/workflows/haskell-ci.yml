# This GitHub workflow config has been generated by a script via
#
#   haskell-ci 'github' 'cabal.project'
#
# To regenerate the script (for example after adjusting tested-with) run
#
#   haskell-ci regenerate
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# REGENDATA ["github","cabal.project"]
#
name: Haskell-CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  irc:
    name: Haskell-CI (IRC notification)
    runs-on: ubuntu-18.04
    needs:
      - linux
    if: ${{ always() && (github.repository == 'haskell-CI/haskell-ci') }}
    strategy:
      fail-fast: false
    steps:
      - name: IRC success notification (irc.freenode.org#haskell-lens)
        uses: Gottox/irc-message-action@v1.1
        if: needs.linux.result == 'success'
        with:
          channel: "#haskell-lens"
          message: "\x0313haskell-ci\x03/\x0306${{ github.ref }}\x03 \x0314${{ github.sha }}\x03 https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} The build succeeded."
          nickname: github-actions
          server: irc.freenode.org
      - name: IRC failure notification (irc.freenode.org#haskell-lens)
        uses: Gottox/irc-message-action@v1.1
        if: needs.linux.result != 'success'
        with:
          channel: "#haskell-lens"
          message: "\x0313haskell-ci\x03/\x0306${{ github.ref }}\x03 \x0314${{ github.sha }}\x03 https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} The build failed."
          nickname: github-actions
          server: irc.freenode.org
  linux:
    name: Haskell-CI Linux - GHC ${{ matrix.ghc }}
    runs-on: ubuntu-18.04
    container:
      image: buildpack-deps:bionic
    continue-on-error: ${{ matrix.allow-failure }}
    strategy:
      matrix:
        include:
          - ghc: 8.10.3
            allow-failure: false
          - ghc: 8.8.4
            allow-failure: false
          - ghc: 8.6.5
            allow-failure: false
          - ghc: 8.4.4
            allow-failure: false
          - ghc: 8.2.2
            allow-failure: false
      fail-fast: false
    steps:
      - name: apt
        run: |
          apt-get update
          apt-get install -y --no-install-recommends gnupg ca-certificates dirmngr curl git software-properties-common
          apt-add-repository -y 'ppa:hvr/ghc'
          apt-get update
          apt-get install -y ghc-$GHC_VERSION cabal-install-3.2
        env:
          GHC_VERSION: ${{ matrix.ghc }}
      - name: Set PATH and environment variables
        run: |
          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
          echo "LANG=C.UTF-8" >> $GITHUB_ENV
          echo "CABAL_DIR=$HOME/.cabal" >> $GITHUB_ENV
          echo "CABAL_CONFIG=$HOME/.cabal/config" >> $GITHUB_ENV
          HC=/opt/ghc/$GHC_VERSION/bin/ghc
          echo "HC=$HC" >> $GITHUB_ENV
          echo "HCPKG=/opt/ghc/$GHC_VERSION/bin/ghc-pkg" >> $GITHUB_ENV
          echo "HADDOCK=/opt/ghc/$GHC_VERSION/bin/haddock" >> $GITHUB_ENV
          echo "CABAL=/opt/cabal/3.2/bin/cabal -vnormal+nowrap" >> $GITHUB_ENV
          HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\d+)\.(\d+)\.(\d+)(\.(\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')
          echo "HCNUMVER=$HCNUMVER" >> $GITHUB_ENV
          echo "ARG_TESTS=--enable-tests" >> $GITHUB_ENV
          echo "ARG_BENCH=--enable-benchmarks" >> $GITHUB_ENV
          if [ $((HCNUMVER > 81003)) -ne 0 ] ; then echo "HEADHACKAGE=true" >> $GITHUB_ENV ; else echo "HEADHACKAGE=false" >> $GITHUB_ENV ; fi
          echo "ARG_COMPILER=--ghc --with-compiler=/opt/ghc/$GHC_VERSION/bin/ghc" >> $GITHUB_ENV
          echo "GHCJSARITH=0" >> $GITHUB_ENV
        env:
          GHC_VERSION: ${{ matrix.ghc }}
      - name: env
        run: |
          env
      - name: write cabal config
        run: |
          mkdir -p $CABAL_DIR
          cat >> $CABAL_CONFIG <<EOF
          remote-build-reporting: anonymous
          write-ghc-environment-files: never
          remote-repo-cache: $CABAL_DIR/packages
          logs-dir:          $CABAL_DIR/logs
          world-file:        $CABAL_DIR/world
          extra-prog-path:   $CABAL_DIR/bin
          symlink-bindir:    $CABAL_DIR/bin
          installdir:        $CABAL_DIR/bin
          build-summary:     $CABAL_DIR/logs/build.log
          store-dir:         $CABAL_DIR/store
          install-dirs user
            prefix: $CABAL_DIR
          repository hackage.haskell.org
            url: http://hackage.haskell.org/
          EOF
          if $HEADHACKAGE; then
          echo "allow-newer: $($HCPKG list --simple-output | sed -E 's/([a-zA-Z-]+)-[0-9.]+/*:\1/g')" >> $CABAL_CONFIG
          cat >> $CABAL_CONFIG <<EOF
          repository head.hackage.ghc.haskell.org
             url: https://ghc.gitlab.haskell.org/head.hackage/
             secure: True
             root-keys: 7541f32a4ccca4f97aea3b22f5e593ba2c0267546016b992dfadcd2fe944e55d
                        26021a13b401500c8eb2761ca95c61f2d625bfef951b939a8124ed12ecf07329
                        f76d08be13e9a61a377a85e2fb63f4c5435d40f8feb3e12eb05905edb8cdea89
             key-threshold: 3
          EOF
          fi
          cat $CABAL_CONFIG
      - name: versions
        run: |
          $HC --version || true
          $HC --print-project-git-commit-id || true
          $CABAL --version || true
      - name: update cabal index
        run: |
          $CABAL v2-update -v
      - name: cache (tools)
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.ghc }}-tools-cc22e9a3
          path: ~/.haskell-ci-tools
      - name: install cabal-plan
        run: |
          mkdir -p $HOME/.cabal/bin
          curl -sL https://github.com/haskell-hvr/cabal-plan/releases/download/v0.6.2.0/cabal-plan-0.6.2.0-x86_64-linux.xz > cabal-plan.xz
          echo 'de73600b1836d3f55e32d80385acc055fd97f60eaa0ab68a755302685f5d81bc  cabal-plan.xz' | sha256sum -c -
          xz -d < cabal-plan.xz > $HOME/.cabal/bin/cabal-plan
          rm -f cabal-plan.xz
          chmod a+x $HOME/.cabal/bin/cabal-plan
          cabal-plan --version
      - name: install cabal-docspec
        run: |
          mkdir -p $HOME/.cabal/bin
          curl -sL https://github.com/phadej/cabal-extras/releases/download/cabal-docspec-0.0.0.20210111/cabal-docspec-0.0.0.20210111.xz > cabal-docspec.xz
          echo '0829bd034fba901cbcfe491d98ed8b28fd54f9cb5c91fa8e1ac62dc4413c9562  cabal-docspec.xz' | sha256sum -c -
          xz -d < cabal-docspec.xz > $HOME/.cabal/bin/cabal-docspec
          rm -f cabal-docspec.xz
          chmod a+x $HOME/.cabal/bin/cabal-docspec
          cabal-docspec --version
      - name: install doctest
        run: |
          $CABAL --store-dir=$HOME/.haskell-ci-tools/store v2-install $ARG_COMPILER --ignore-project -j2 doctest --constraint='doctest ^>=0.17'
          doctest --version
      - name: install hlint
        run: |
          if [ $((HCNUMVER >= 81000 && HCNUMVER < 81004)) -ne 0 ] ; then HLINTVER=$(cd /tmp && (${CABAL} v2-install -v $ARG_COMPILER --dry-run hlint  --constraint='hlint >=3.2 && <3.3' |  perl -ne 'if (/\bhlint-(\d+(\.\d+)*)\b/) { print "$1"; last; }')); echo "HLint version $HLINTVER" ; fi
          if [ $((HCNUMVER >= 81000 && HCNUMVER < 81004)) -ne 0 ] ; then if [ ! -e $HOME/.haskell-ci-tools/hlint-$HLINTVER/hlint ]; then echo "Downloading HLint version $HLINTVER"; mkdir -p $HOME/.haskell-ci-tools; curl --write-out 'Status Code: %{http_code} Redirects: %{num_redirects} Total time: %{time_total} Total Dsize: %{size_download}\n' --silent --location --output $HOME/.haskell-ci-tools/hlint-$HLINTVER.tar.gz "https://github.com/ndmitchell/hlint/releases/download/v$HLINTVER/hlint-$HLINTVER-x86_64-linux.tar.gz"; tar -xzv -f $HOME/.haskell-ci-tools/hlint-$HLINTVER.tar.gz -C $HOME/.haskell-ci-tools; fi ; fi
          if [ $((HCNUMVER >= 81000 && HCNUMVER < 81004)) -ne 0 ] ; then mkdir -p $CABAL_DIR/bin && ln -sf "$HOME/.haskell-ci-tools/hlint-$HLINTVER/hlint" $CABAL_DIR/bin/hlint ; fi
          if [ $((HCNUMVER >= 81000 && HCNUMVER < 81004)) -ne 0 ] ; then hlint --version ; fi
      - name: checkout
        uses: actions/checkout@v2
        with:
          path: source
      - name: sdist
        run: |
          mkdir -p sdist
          cd source || false
          $CABAL sdist all --output-dir $GITHUB_WORKSPACE/sdist
      - name: unpack
        run: |
          mkdir -p unpacked
          find sdist -maxdepth 1 -type f -name '*.tar.gz' -exec tar -C $GITHUB_WORKSPACE/unpacked -xzvf {} \;
      - name: generate cabal.project
        run: |
          PKGDIR_haskell_ci="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/haskell-ci-[0-9.]*')"
          echo "PKGDIR_haskell_ci=${PKGDIR_haskell_ci}" >> $GITHUB_ENV
          PKGDIR_cabal_install_parsers="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/cabal-install-parsers-[0-9.]*')"
          echo "PKGDIR_cabal_install_parsers=${PKGDIR_cabal_install_parsers}" >> $GITHUB_ENV
          touch cabal.project
          touch cabal.project.local
          echo "packages: ${PKGDIR_haskell_ci}" >> cabal.project
          echo "packages: ${PKGDIR_cabal_install_parsers}" >> cabal.project
          cat >> cabal.project <<EOF
          package *
            ghc-options: -Werror=missing-methods
          EOF
          cat >> cabal.project <<EOF
          package haskell-ci
            ghc-options: -Werror

          package cabal-install-parsers
            ghc-options: -Werror

          keep-going: False

          package bytestring
            tests: False
          EOF
          $HCPKG list --simple-output --names-only | perl -ne 'for (split /\s+/) { print "constraints: $_ installed\n" unless /^(Cabal|cabal-install-parsers|haskell-ci)$/; }' >> cabal.project.local
          cat cabal.project
          cat cabal.project.local
      - name: dump install plan
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dry-run all
          cabal-plan
      - name: cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ github.sha }}
          path: ~/.cabal/store
          restore-keys: ${{ runner.os }}-${{ matrix.ghc }}-
      - name: install dependencies
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dependencies-only -j2 all
      - name: build w/o tests
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: build
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --write-ghc-environment-files=always
      - name: tests
        run: |
          $CABAL v2-test $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --test-show-details=direct
      - name: doctest
        run: |
          perl -i -e 'while (<ARGV>) { print unless /package-id\s+(base-compat-batteries|bs-cmpt-bttrs)-\d+(\.\d+)*/; }' .ghc.environment.*
          cd ${PKGDIR_haskell_ci} || false
          doctest --fast -XNoImplicitPrelude -XBangPatterns -XDeriveAnyClass -XDeriveFoldable -XDeriveFunctor -XDeriveGeneric -XDeriveTraversable -XDerivingStrategies -XGeneralizedNewtypeDeriving -XScopedTypeVariables src
          cd ${PKGDIR_cabal_install_parsers} || false
          doctest --fast src
      - name: docspec
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH all
          cabal-docspec $ARG_COMPILER --verbose --timeout 2
      - name: hlint
        run: |
          if [ $((HCNUMVER >= 81000 && HCNUMVER < 81004)) -ne 0 ] ; then (cd ${PKGDIR_haskell_ci} && hlint -h ${GITHUB_WORKSPACE}/source/.hlint.yaml -XNoImplicitPrelude -XBangPatterns -XDeriveAnyClass -XDeriveFoldable -XDeriveFunctor -XDeriveGeneric -XDeriveTraversable -XDerivingStrategies -XGeneralizedNewtypeDeriving -XScopedTypeVariables src) ; fi
          if [ $((HCNUMVER >= 81000 && HCNUMVER < 81004)) -ne 0 ] ; then (cd ${PKGDIR_haskell_ci} && hlint -h ${GITHUB_WORKSPACE}/source/.hlint.yaml cli) ; fi
          if [ $((HCNUMVER >= 81000 && HCNUMVER < 81004)) -ne 0 ] ; then (cd ${PKGDIR_cabal_install_parsers} && hlint -h ${GITHUB_WORKSPACE}/source/.hlint.yaml src) ; fi
      - name: cabal check
        run: |
          cd ${PKGDIR_haskell_ci} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_cabal_install_parsers} || false
          ${CABAL} -vnormal check
      - name: haddock
        run: |
          $CABAL v2-haddock $ARG_COMPILER --with-haddock $HADDOCK $ARG_TESTS $ARG_BENCH all
      - name: unconstrained build
        run: |
          rm -f cabal.project.local
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: prepare for constraint sets
        run: |
          rm -f cabal.project.local
      - name: constraint set deepseq-1.4
        run: |
          if [ $((HCNUMVER < 80400)) -ne 0 ] ; then $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='deepseq ==1.4.*' --constraint='binary installed' all ; fi
          if [ $((HCNUMVER < 80400)) -ne 0 ] ; then $CABAL v2-haddock $ARG_COMPILER --with-haddock $HADDOCK --disable-tests --disable-benchmarks --constraint='deepseq ==1.4.*' --constraint='binary installed' all ; fi
